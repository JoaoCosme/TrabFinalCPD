@startuml classDiagram
    hide empty members

    class TFApp{
        -SearchOrchestrator orchestrator
    }
    class WebTFApp{
        -SearchOrchestrator orchestrator
    }

    class SearchOrchestratorAssembler<<Static>>{
        +Create():SearchOrchestrator
    }
    class DBEtnries<<Singleton>>{
        - HashTable<Jogador> jogadores
        - HashTable<User> users
    }

    class HashTable{

    }

    class JogadorHashTable extends HashTable{
        + add(Jogador)
        + getJogador(int):Jogador
    }

    class UserHashTable extends HashTable{
        + add(User)
        + getUser(int):User
    }

    class TagHashTable extends HashTable{
        + add(PlayerTag)
        + getTag(String):PlayerTag
    }

    class PositionHashTable extends HashTable{
        + add(PositionPlayerList)
        + getPositionPlayerList(String):PositionPlayerList
    }

    class Jogador{
        - int sofifaID
        - String shortName
        - List<String> playerPositions
        - double globalRating
        - int count
        - List<String> tags
    }

    class UserClassJogador{
        - int sofifaID
        - int rating
    }

    class User{
        - int id
        - List<UserClassJogador> jogadoresClassificados
    }

    class PlayerTag{
        - String tag
        - List<Integer> playerList
    }

    class PositionPlayerList{
        - String position
        - List<Integer> playerList
    }

    class SearchOrchestrator{
        +run()
    }

    class PesquisaJogadores{
        - ArvoreTrie nomeJogadores
        - DBEtnries bancoDeDados
        + constructor(args[])
        + searchPlayer(String prefixo)
    }

    Class ArvoreTrie{
        - Node root
        + get(key:Strig): int
        + put(key:String,val:int)
        + keysWithPrefix(pre:String):List<Integer>

    }

    class PesquisaAvaliacaoUsers{
        - DBEtnries bancoDeDados
        + GetUserReviews(int userCode)
    }
    class PesuisaTags{
        - DBEtnries bancoDeDados
        + GetPlayersWTags(String[] tags)
    }
    class PesquisaTopN{
        - DBEtnries bancoDeDados
        + GetTop(int topN, String posicao)
    }

    class jogadorQuickSort{
        + sort(List<Jogador>)
    }

    class UserClassJogadorQuickSort{
        +sort(List<UserClassJogador>)
    }
    
    SearchOrchestratorAssembler --> SearchOrchestrator:builds
    WebTFApp --> SearchOrchestratorAssembler:calls
    TFApp --> SearchOrchestratorAssembler:calls
    SearchOrchestratorAssembler -> DBEtnries: initializes
    SearchOrchestrator --> PesquisaJogadores:has
    SearchOrchestrator --> PesuisaTags:has
    SearchOrchestrator --> PesquisaTopN:has
    SearchOrchestrator --> PesquisaAvaliacaoUsers:has
    PesquisaJogadores --> ArvoreTrie: has
    DBEtnries --> HashTable
    JogadorHashTable --> Jogador:Armazena
    UserHashTable --> User: Armazena
    TagHashTable --> PlayerTag: Armazena
    PositionHashTable --> PositionPlayerList: Armazena
    User --> UserClassJogador
    PesquisaJogadores ..> jogadorQuickSort: usa
    PesquisaAvaliacaoUsers ..> UserClassJogadorQuickSort:usa
    
@enduml